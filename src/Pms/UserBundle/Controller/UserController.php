<?phpnamespace Pms\UserBundle\Controller;use Symfony\Bundle\FrameworkBundle\Controller\Controller;use Symfony\Component\HttpFoundation\Request;use Symfony\Component\HttpFoundation\Response;use Pms\UserBundle\Entity\User;use Doctrine\ORM\Repository;class UserController extends Controller{    public function userAddAction(Request $request)    {        $service = $this->get('pms_user.registration.form.type');        $user = new User();        $form = $this->createForm($service, $user);        if ($request->getMethod() == 'POST') {            $form->handleRequest($request);            if ($form->isValid()) {                $userName = $user->getUsername();                $userEmail = $user->getEmail();                $userNameCheck = $this->getDoctrine()->getRepository('UserBundle:User')->findOneBy(                    array('username' => $userName )                );                $userEmailCheck = $this->getDoctrine()->getRepository('UserBundle:User')->findOneBy(                    array('email' => $userEmail )                );                if($userNameCheck || $userEmailCheck){                    if($userEmailCheck){                        $this->get('session')->getFlashBag()->add(                            'notice',                            'Email Address Duplicate'                        );                    }else{                        $this->get('session')->getFlashBag()->add(                            'notice',                            'User Name Duplicate'                        );                    }                }else{                    $status = '1';                    $user->setEnabled($status);                    $this->getDoctrine()->getRepository('UserBundle:User')->create($user);                    $this->get('session')->getFlashBag()->add(                        'notice',                        'User Successfully Add'                    );                }                return $this->redirect($this->generateUrl('user_add'));            }        }        $dql = "SELECT a FROM UserBundle:User a ORDER BY a.id DESC";        list($users, $page) = $this->paginate($dql);        return $this->render('UserBundle:User:add.html.twig', array(            'users' => $users,            'page' => $page,            'form' => $form->createView()        ));    }    public function userEditAction(Request $request, User $user)    {        $service = $this->get('pms_user.registration.form.type');        $form = $this->createForm($service, $user);        if ($request->getMethod() == 'POST') {            $form->handleRequest($request);            if ($form->isValid()) {                $this->getDoctrine()->getRepository('UserBundle:User')->update($user);                $this->get('session')->getFlashBag()->add(                    'notice',                    'User Successfully Update'                );                return $this->redirect($this->generateUrl('user_add'));            }        }        $dql = "SELECT a FROM UserBundle:User a ORDER BY a.id DESC";        list($users, $page) = $this->paginate($dql);        return $this->render('UserBundle:User:add.html.twig', array(            'users' => $users,            'page' => $page,            'form' => $form->createView()        ));    }    public function usernameCheckAction(Request $request)    {        $user = $this->get('fos_user.user_manager')->findUserByUsername(trim($request->request->get('userName')));        if ($user) {            $return = array("responseCode" => 200, "user_name" => "User name already exist.");            $return = json_encode($return);            return new Response($return, 200, array('Content-Type' => 'application/json'));        } else {            $return = array("responseCode" => '404', "user_name" => "User name available.");            $return = json_encode($return);            return new Response($return, 200, array('Content-Type' => 'application/json'));        }    }    public function emailCheckAction(Request $request)    {        $email = $this->get('fos_user.user_manager')->findUserByEmail(trim($request->request->get('email')));        if ($email) {            $return = array("responseCode" => 200, "email_check" => "Email already exist.");            $return = json_encode($return);            return new Response($return, 200, array('Content-Type' => 'application/json'));        } else {            $return = array("responseCode" => '404', "email_check" => "Email address available.");            $return = json_encode($return);            return new Response($return, 200, array('Content-Type' => 'application/json'));        }    }    public function userDeactiveAction(User $user)    {        $status = '0';        $user->setEnabled($status);        $this->getDoctrine()->getRepository('UserBundle:User')->update($user);        $this->get('session')->getFlashBag()->add(            'notice',            'User Successfully Deactivated'        );        return $this->redirect($this->generateUrl('user_add'));    }    public function userActiveAction(User $user)    {        $status = '1';        $user->setEnabled($status);        $this->getDoctrine()->getRepository('UserBundle:User')->update($user);        $this->get('session')->getFlashBag()->add(            'notice',            'User Successfully Activated'        );        return $this->redirect($this->generateUrl('user_add'));    }    public function paginate($dql)    {        $em = $this->get('doctrine.orm.entity_manager');        $query = $em->createQuery($dql);        $paginator = $this->get('knp_paginator');        $value = $paginator->paginate(            $query,            $page = $this->get('request')->query->get('page', 1) /*page number*/,            10/*limit per page*/        );        return array($value, $page);    }}