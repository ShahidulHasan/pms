<?phpnamespace Pms\UserBundle\Controller;use Symfony\Bundle\FrameworkBundle\Controller\Controller;use Symfony\Component\HttpFoundation\Request;use Symfony\Component\HttpFoundation\Response;use Pms\UserBundle\Entity\User;use Doctrine\ORM\Repository;class UserController extends Controller{    public function indexAction()    {        $form = $this->createFormBuilder()            ->add('AddNewUser', 'button')            ->getForm();        $em = $this->get('doctrine.orm.entity_manager');        $dql = "SELECT a FROM UserBundle:User a ";        $query = $em->createQuery($dql);        $paginator = $this->get('knp_paginator');        $pagination = $paginator->paginate(            $query,            $this->get('request')->query->get('page', 1) /*page number*/,            4/*limit per page*/        );        return $this->render('UserBundle:User:list.html.twig', array(            'form' => $form->createView(),            'pagination' => $pagination        ));    }    public function userViewAction($id)    {        $user = $this->getDoctrine()->getRepository('UserBundle:User')->find($id);        return $this->render('UserBundle:User:view.html.twig', array(            'user' => $user        ));    }    public function userAddAction(Request $request)    {        $service = $this->get('pms_user.registration.form.type');        $entity = new User();        $form = $this->createForm($service, $entity);        if ($request->getMethod() == 'POST') {            $form->handleRequest($request);            if ($form->isValid()) {                $entity->setCreatedDate(new \DateTime(date('Y-m-d')));                $user = $this->get('security.context')->getToken()->getUser()->getId();                $entity->setCreatedBy($user);                $this->getDoctrine()->getRepository('UserBundle:User')->create($entity);                $this->get('session')->getFlashBag()->add(                    'notice',                    'User Successfully Inserted'                );                return $this->redirect($this->generateUrl('user_list'));            }        }        return $this->render('UserBundle:User:add.html.twig', array(            'form' => $form->createView()        ));    }    public function userUpdateAction(Request $request, User $entity)    {        $service = $this->get('pms_user.registration.form.type');        $form = $this->createForm($service, $entity);        if ($request->getMethod() == 'POST') {            $form->handleRequest($request);            if ($form->isValid()) {                $entity->setUpdatedDate(new \DateTime(date('Y-m-d')));                $user = $this->get('security.context')->getToken()->getUser()->getId();                $entity->setUpdatedBy($user);                $this->getDoctrine()->getRepository('UserBundle:User')->update($entity);                $this->get('session')->getFlashBag()->add(                    'notice',                    'User Successfully Updated'                );                return $this->redirect($this->generateUrl('user_list'));            }        }        return $this->render('UserBundle:User:add.html.twig', array(            'entity' => $entity,            'form' => $form->createView(),        ));    }    public function userActiveAction(User $entity)    {        $status = '1';        $entity->setEnabled($status);        $this->getDoctrine()->getRepository('UserBundle:User')->update($entity);        $this->get('session')->getFlashBag()->add(            'notice',            'User Successfully Active'        );        return $this->redirect($this->generateUrl('user_list'));    }    public function userDeactivateAction(User $entity)    {        $status = '0';        $entity->setEnabled($status);        $this->getDoctrine()->getRepository('UserBundle:User')->update($entity);        $this->get('session')->getFlashBag()->add(            'notice',            'User Successfully Deactive'        );        return $this->redirect($this->generateUrl('user_list'));    }    public function userDeactivatedAction()    {        $em = $this->get('doctrine.orm.entity_manager');        $dql = "SELECT a FROM UserBundle:User a ";        $query = $em->createQuery($dql);        $paginator = $this->get('knp_paginator');        $pagination = $paginator->paginate(            $query,            $this->get('request')->query->get('page', 1) /*page number*/,            4/*limit per page*/        );        return $this->render('UserBundle:User:deactivated.html.twig', array(            'pagination' => $pagination        ));    }    public function userDeleteAction(User $entity)    {        $this->getDoctrine()->getRepository('UserBundle:User')->delete($entity);        $this->get('session')->getFlashBag()->add(            'notice',            'User Successfully Deleted'        );        return $this->redirect($this->generateUrl('user_list'));    }    public function userDeletedAction()    {        $users = $this->getDoctrine()->getRepository('UserBundle:User')->getAll();        return $this->render('UserBundle:User:deleted.html.twig', array(            'users' => $users        ));    }    public function userArchiveAction(User $entity)    {        $status = '4';        $entity->setStatus($status);        $this->getDoctrine()->getRepository('UserBundle:User')->update($entity);        $this->get('session')->getFlashBag()->add(            'notice',            'User Successfully Archived'        );        return $this->redirect($this->generateUrl('user_list'));    }    public function userArchivedAction()    {        // for future use    }    public function usernameCheckAction(Request $request)    {        $user = $this->get('fos_user.user_manager')->findUserByUsername(trim($request->request->get('userName')));        if ($user) {            $return = array("responseCode" => 200, "user_name" => "User name already exist.");            $return = json_encode($return);            return new Response($return, 200, array('Content-Type' => 'application/json'));        } else {            $return = array("responseCode" => '404', "user_name" => "User name available.");            $return = json_encode($return);            return new Response($return, 200, array('Content-Type' => 'application/json'));        }    }    public function emailCheckAction(Request $request)    {        $email = $this->get('fos_user.user_manager')->findUserByEmail(trim($request->request->get('email')));        if ($email) {            $return = array("responseCode" => 200, "email_check" => "Email already exist.");            $return = json_encode($return);            return new Response($return, 200, array('Content-Type' => 'application/json'));        } else {            $return = array("responseCode" => '404', "email_check" => "Email available.");            $return = json_encode($return);            return new Response($return, 200, array('Content-Type' => 'application/json'));        }    }}